# -*- coding: utf-8 -*-
"""Copy of webinar_content_students.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10EtxTosKxAfSkEH-p7NNsBueYs1zQPK4

<p align="center">
<img src="https://cdn.datacamp.com/main-app/assets/brand/datacamp-horizontal-rgb-b641f95b7bdd7560b554c761a0b4910f9619907dd823c0e41244ed72078723bf.svg" alt = "DataCamp icon" width="50%">
</p>
<br><br>

## **Python for Excel Users**


Welcome to this live, hands-on training where you will learn how to upgrade from being an Excel user to using Python. 

In most organizations across all industries, data fluency, technical skills and a data-driven mindset are becoming sought after skills that drive organizational success in the digital age. This shift has spurred on the adoption of tools that go beyond Excel, which allow for more robust data analysis, visualization and presentation. In this notebook, you will learn:

* How to import Excel files into `pandas`.
* Filter, add new columns, and explore DataFrames.
* Apply common Excel operations such as pivot tables and VLOOKUP in Python.
* Present data as visualizations using `matplotlib` and `seaborn`.

The dataset to be used in this webinar is an Excel file named `sales_data_dirty.xlsx` - it contains 4 sheets, each containing the following columns:

<br>



![alt](https://github.com/adelnehme/python-for-excel-users-webinar/blob/master/image.png?raw=true)

## **Getting started with the dataset**

Similar to how you can download software (excel, tableau etc..) on your computer that allows you perform specific functions (data analysis, visualization ...) - Python has packages or modules that we download and install that allows to perform a set of tasks. We can also set aliases for these packages to shorten their name and make calling them more convenient.
"""

# Import relevant packages
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Import the data
data = pd.ExcelFile('https://github.com/adelnehme/python-for-excel-users-webinar/blob/master/sales_data_dirty.xlsx?raw=true')

# Print the name of the sheets
data.sheet_names

# Parse sales data
# Atributes don't have () and Methods and fuctions have O()
sales = data.parse('sales')
# Print dimensions and glimpse
print(sales.shape)
sales.head(5)

# Parse customers data 
customers = data.parse('customers')
# Print dimensions and glimpse
print(customers.shape)
customers.head(5)

# Parse dates data
dates = data.parse('dates')
# Print dimensions and glimpse
print(dates.shape)
dates.head(5)

# Parse employees data
employees = data.parse('employees')
# Print dimensions and glimpse
print(employees.shape)
employees.head(5)

"""## **Better understanding our data**

Some important and common methods needed to get a better understanding of DataFrames are the following: 

- `.info()` provides a bird's eye view of column data types and missing values
- `.describe()` returns a distribution of numeric columns in your DataFrame
- `.unique()` gives out the number of unique values in a column
"""

# Understand missingness of sales data
sales.info()

# Understand distribution of sales data
sales.describe()

# Make sure Status column has no other unique values
print(sales['Status'].unique())
print(sales['OnlineOrderFlag'].unique())

# Understand column types of dates and missingness
dates.info()

# Let's understand the degree of missingness in customers dataset
customers.info()

# How to find missing values?
customers.isna().sum()

"""## **Making our data analysis ready**"""

# Drop status column from sales
sales.drop('Status', axis = 1, inplace = True) 
sales.info()

"""***A note on dictionaries***

Dictionaries are useful data structures in Python with the following format `my_dictionary = {key: value}` where a key is mapped to a value and whose value can be returned with `my_dictionary[key]`.
"""

# Example
names = {'first_name':'Adel',
         'last_name': 'Nehme'}

names['first_name']

# Replace OnlineOrderFlag to offline and online
sales['OnlineOrderFlag'] = sales['OnlineOrderFlag'].replace({0: 'offline', 1: 'online'})

# Make sure it is the case
sales('OnlineOrderFlag').unique()

# Convert data columns to datetime while keeping only Y,m,d
dates['OrderDate'] = pd.to_datetime(dates['OrderDate'].format = '%Y-%m-%d')
dates['ShipDate'] = pd.to_datetime(dates['ShipDate'].format = '%Y-%m-%d')

# Make sure now into datetime
dates.info()

# Impute missing values based on key business assumptions
customers.loc[customers['EmployeeFirstName'].isnull(), 
              'ChannelType'] = ChannelType = 'B2C'
customers.loc[customers['EmployeeFirstName'].notnull(), 
              'ChannelType'] = ChannelType = 'B2B'

# Make sure no more missing data in ChannelType
dates.isna().sum()

# Combine first and last name in customers
customers['FullNome'] = customers['EmployeeFirstName'] + ' ' + customers['EmployeeLastName']
customers.head()

# Combine first and last name in employees
employees['Fullnmae'] = employees['FirstName'] + ' ' + employees['LastName']
employees.head()

"""### Q&A time!

## **Case studies**

### _Q1: How did we do in revenue over the years?_

Since we have revenue data for each `SalesOrderID` in the `sales` sheet - and the order date and ship date for each `SalesOrderID` in hte `dates` sheet - we want to combine both DataFrames similar to how a VLOOKUP would work. 

<br>

<p align="center">
<img src="https://github.com/adelnehme/python-for-excel-users-webinar/blob/master/pivots.png?raw=True" alt = "pivot" width="70%">
</p>

<br><br>

In more technical terms, we want to perform of left join of both DataFrames where `SalesOrderId` is a common column between them.


<p align="center">
<img src="https://github.com/adelnehme/python-for-excel-users-webinar/blob/master/left_join.png?raw=True" alt = "DataCamp icon" width="50%">
</p>





An example of how to merge a DataFrame in pandas is included below with the `.merge()` method, where we are merging `df_2` into `df_1` on a common column between them called `common_column`. The `how` argument determines which DataFrame to preserve - in this case it's `df_1` since it's on the **left**. This has the same logic as SQL joins as well.

`df_1.merge(df_2, on = 'common_column', how = 'left')`
"""

# Merge data - the VLOOKUP of Excel
sales_date = sales.merge(dates, on = 'SalesOrderID', how = 'left')
sales_date.head()

# Create column for year and month
sales_date['Order_Year'] = sales_date['OrderDate'].dt.year
sales_date['Order_YM'] = sales_date['OrderDate'].dt.strftime('%Y-%m')
sales_date.head()

"""To calculate the total revenue per year, we need to perform something like a PIVOT TABLE in Excel. In pandas, there's a variety of ways to acheive this - there is even a `.pivot_table()` method. However we will be using instead the `.groupby()` method which takes in as argument the column name being grouped by, and can be chained with other methods to compute interesting statistics. Here's an example of grouping by the column `col_A` of the example DataFrame `df_1` and computing the sum of the remaining columns:

`df_1.groupby('col_A').sum()`
"""

# Extract revenue by year
sales_by_year = sales_date.groupby('Order_Year').sum().reset_index()
sales_by_year

"""There are many ways to perform visualizations in Python - the two most widely used visualization packages are `seaborn` (which is usually imported as `sns`) and `matplotlib.pyplot` (which is usually imported as `plt`). 

Without going into the details, we will be creating and customizing two types of visualizations in this notebook by using these functions:

- Barplots using `sns.barplot(x=,y=,data=)`
  - `x`: The column name to be used on the x-axis.
  - `y`: The column name to be used on the y-axis.
  - `data`: The data used to visualize
- Lineplots using `sns.lineplot(x=,y=,data=)`
  - `x`: The column name to be used on the x-axis.
  - `y`: The column name to be used on the y-axis.
  - `data`: The data used to visualize
- Setting figure labels by:
  - `plt.xlabel()` to set the x-axis label.
  - `plt.ylabel()` to set the y-axis label.
  - `plt.title()` to set the x-axis label.
  - `plt.xticks(rotation=)` to set the x-axis ticks with proper rotation
- Showing the plot with `plt.show()`
"""

# Visualize it
sns.barplot(x = 'Order_Year', y = 'TotalDue', data = sales_by_year)
plt.xlabel('Years')
plt.ylabel('Revenue')
plt.title('Revenue over the years')
plt.show()

# Is there seasonality?
sales_by_year_month = sales_date.groupby('Order_YM').sum().reset_index()
sales_by_year_month.head()

# Visualize it
plt.figure(figsize = (18, 6))
sns.lineplot(x = 'Order_YM', y = 'TotalDue', data = sales_by_year_month)
plt.xlabel('Years and Months')
plt.ylabel('Revenue')
plt.title('Revenue over years and months')
plt.sticks(rotation = 45)
plt.show()

"""### _Q2: How is revenue divided by channel type overall and over time?_

Similar to how we merged the `sales` sheet with the `dates` sheet when answering Q1, we will be merging the `sales` sheet with the `customers` sheet to get the channel type, employee and customer names for each `SalesOrderID`.

<br>

<p align="center">
<img src="https://github.com/adelnehme/python-for-excel-users-webinar/blob/master/pivots2.png?raw=True" alt = "pivot" width="70%">
</p>

<br>
"""

# Merge sales and customer data
sales_customers = sales.merge(customers, on = 'SalesOrderID', how = 'left')
sales_customers.head()

# Identify revenue and amount sold by channel
sales_by_channel = sales_customers.groupby('ChannelType').sum().reset_index()
sales_by_channel

# Visualize
sns.barplot(x= 'ChannelType', y = 'TotalDue', data = sales_by_channel)
plt.xlabel('Channel Type')
plt.ylabel('Revenue')
plt.title('Revenue by Channel Type')
plt.show()

# Merge sales, dates and customers data
sales_customers_date = sales_date.merge(customers, on = 'SalesOrderID', how = 'left')
sales_customers_date.head()

# Group by year by channel type
sales_by_channel_date = sales_customers_date.groupby(['Order_Year', 'ChannelType']).sum().reset_index()
sales_by_channel_date

# Visualize
sns.barplot(x = 'Order_Year', y = 'TotalDue', data = sales_by_channel_date, hue = 'ChannelType')
plt.xlabel('Order Year')
plt.ylabel('Total Revenue')
plt.title('Channel type performance in revenue over years')
plt.show()

"""### _Q3: Who are the employees responsible for the most B2B sales overall and in 2013?_

The `sales_customers_date` has already been created when we merged `sales` with `customers` and `dates` in Q1 and Q2

```py
# From Q1
sales_date = sales.merge(dates, on="SalesOrderID", how = "left")
# From Q2
sales_customers_date = sales_date.merge(customers, on = "SalesOrderID", how = "left")
```
"""

# Group by employee performance
sales_employees = sales_customers_date.groupby('FullName').sum().reset_index()
sales_employees.head()

"""To be able to truly see the highest earning employees - we can use the `.sort_values()` method of a DataFrame. For example, we can sort `col_A` of the example DataFrame `df_1` as such:

`df_1.sort_values(by=,ascending=,inplace=)`

* `by` takes in the column name being sorted by
* `ascending` takes in `True` or `False` depending on whether we want to sort it by ascending order
* `inplace` takes in `True` or `False` depending on whether we want to save our changes in the same DataFrame being sorted.
"""

# Sort it so we visualize it correctly
sales_employees.sort_values('TotalDue', ascending = True, inplace = True)
sales_employees.head()

# Visualize
plt.figure(figsize = (18, 6))
sns.barplot(x = 'FullName', y = 'TotalDue', data = sales_employees)
plt.xlabel('Employee Full Name')
plt.ylabel('Revenue')
plt.xticks(rotation = 45)
plt.title('B2B Revenue by Sales Person')
plt.show()

# Group by employee performance and year
sales_employees = sales_customers_date.groupby(['FullName', 'Order_Year']).sum().reset_index()
sales_employees.head()

# Sort to make it easier to visualize
sales_employees.sort_vales(['Order_Year', 'TotalDue'], ascending = True, inplace = True)
sales_employess.head()

# Who was the best last year?
sales_employees_2013 = sales_employee[sales_employee['Order_Year'] == 2013]
sales_employees_2013.head()

# Visualize
plt.figure(figsize = 18,6)
sns.barplot(x = 'FullName', y = 'TotalDue', data = sales_employees_2013)
plt.xlabel('Employee full name')
plt.ylabel('Total Revenue')
plt.xticks(rotation = 45)
plt.title('B2B Revenue by Sales Person in 2013')
plt.show()

"""### Q&A time!

### _Take-home question: Who were the highest earning (in compensation) employees in 2012?_

**Clues:**
- Compensation = Sales generated * Commission
- You need to use the all four sheets
- Sort your results by the amount of commission earned 

**Bonus points if:**
- You make your chart extra pretty
- Use syntax not covered in this session

**Submission details:**
- Share with us a code snippet with your output on LinkedIn, Twitter or Facebook
- Tag us on `@DataCamp` with the hashtag `#datacamplive`
"""